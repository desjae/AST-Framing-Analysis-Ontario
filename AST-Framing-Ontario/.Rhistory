}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
corpusKey <- data.frame(corpusNum, subFolders)
rm(temp_df_source, tempCorpus, address, doc_id, fileBaseNames, filePath, i, m, n, newFile, pdfLocation, subFolder, test, txtLocation)
# n - number of corpora
n <- 4
for (i in seq(1, n, 1))
{
tempCorpus <-  eval(parse(text = paste("corpus", i, sep = "")))
TDM <- TermDocumentMatrix(tempCorpus)
DTM <- DocumentTermMatrix(tempCorpus)
matrix1 <- as.matrix(TDM)
matrix2 <- as.matrix(DTM)
assign(paste("corpus", i, "TDM", sep= ""), matrix1)
assign(paste("corpus", i, "DTM", sep= ""), matrix2)
}
rm(matrix1, matrix2)
# n - number of corpora
n <- 4
for (i in seq(1, n, 1))
{
tempDF <- eval(parse(text = paste("cleanTextDF", i, sep = "")))
it_train = itoken(tempDF$text, progressbar = FALSE)
assign(paste("vocab", i, sep= ""), create_vocabulary(it_train))
assign(paste("vocab", i, sep= ""), prune_vocabulary(vocab1, term_count_min = 5))
}
library(tm)
library(readr)
library(tools)
library(dplyr)
library(tidytext)
library(topicmodels)
library(ggplot2)
library(wordcloud)
#library(word2vec)
library(pdftools)
library(reshape2)
library(text2vec)
# n - number of corpora
n <- 4
for (i in seq(1, n, 1))
{
tempDF <- eval(parse(text = paste("cleanTextDF", i, sep = "")))
it_train = itoken(tempDF$text, progressbar = FALSE)
assign(paste("vocab", i, sep= ""), create_vocabulary(it_train))
assign(paste("vocab", i, sep= ""), prune_vocabulary(vocab1, term_count_min = 5))
}
View(vocab2)
View(vocab3)
View(vocab4)
View(vocab1)
# n - number of corpora
n <- 4
for (i in seq(1, n, 1))
{
tempDF <- eval(parse(text = paste("cleanTextDF", i, sep = "")))
it_train = itoken(tempDF$text, progressbar = FALSE)
assign(paste("vocab", i, sep= ""), create_vocabulary(it_train))
tempVocab <- create_vocabulary(it_train)
assign(paste("vocab", i, sep= ""), prune_vocabulary(tempVocab, term_count_min = 5))
}
rm(tempVocab)
View(corpusKey)
rm(list = ls())
masterFolder <- "Texts"
subFolders <- list.files(masterFolder, full.names=TRUE)
# if txt folder already exists from previous execution of code this ensures it is not added to subfolders
# The limitation is that your file name, at any point cannot contain the sequence of characters "txt" as it will be flagged as a non-pdf subfolder
subFolders <- subFolders[grep(x =list.files(masterFolder, full.names=TRUE), pattern =  "txt", invert = TRUE)]
subFolders
# Stop words for each of the corpora, or based on how your directory organizes files
# Add stop words if you have more than 4 corpora
NAwords2 <- c("login", "css", "sir", "waterloo", "niagara", "john", "school", "transportation", "york", "ottawa", "can", "tip", "london", "provides", "elgin", "find", "make", "active", "travel", "lord", "holy", "toronto", "-")
NAwords3 <- c("york", "lane", "school", "transportation", "region", "halton", "can", "use", "guelph", "kingston", "durham", "get")
NAwords4 <- c("active", "and", "asst", "board", "can", "cancellations", "catholic", "contact", "cycling", "district", "east", "gta", "https", "login", "may", "or", "please", "school", "schools", "stp", "student", "students", "the", "transportation", "tri", "walking", "waterloo", "website", "will")
NAwords1 <- c("school", "transportation", "can", "use", "active", "et", "al", "travel", "study", "elsevier", "na", "sciencedirect", "journal", "transport", "mode", "modes", "children", "the", "use", "n", "s", "schools", "also", "p", "b", "used", "number")
corpusNum <- c()
# Iterating through each subfolders
m <- 1
for (subFolder in subFolders){
pdfLocation <- subFolder
if (file.exists(paste(pdfLocation, "txt"))){
txtLocation <- paste(pdfLocation, "txt")
}else{
dir.create(paste(pdfLocation, "txt"))
txtLocation <- paste(pdfLocation, "txt")
}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
####print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
corpusKey <- data.frame(corpusNum, subFolders)
rm(temp_df_source, tempCorpus, address, doc_id, fileBaseNames, filePath, i, m, n, newFile, pdfLocation, subFolder, test, txtLocation)
# n - number of corpora
n <- 4
for (i in seq(1, n, 1))
{
tempCorpus <-  eval(parse(text = paste("corpus", i, sep = "")))
TDM <- TermDocumentMatrix(tempCorpus)
DTM <- DocumentTermMatrix(tempCorpus)
matrix1 <- as.matrix(TDM)
matrix2 <- as.matrix(DTM)
assign(paste("corpus", i, "TDM", sep= ""), matrix1)
assign(paste("corpus", i, "DTM", sep= ""), matrix2)
}
rm(matrix1, matrix2)
# n - number of corpora
n <- 4
for (i in seq(1, n, 1))
{
tempDF <- eval(parse(text = paste("cleanTextDF", i, sep = "")))
it_train = itoken(tempDF$text, progressbar = FALSE)
assign(paste("vocab", i, sep= ""), create_vocabulary(it_train))
tempVocab <- create_vocabulary(it_train)
assign(paste("vocab", i, sep= ""), prune_vocabulary(tempVocab, term_count_min = 5))
}
rm(tempVocab)
# Stop words for each of the corpora, or based on how your directory organizes files
# Add stop words if you have more than 4 corpora
NAwords2 <- c("login", "css", "sir", "waterloo", "niagara", "john", "school", "transportation", "york", "ottawa", "can", "tip", "london", "provides", "elgin", "find", "make", "active", "travel", "lord", "holy", "toronto")
NAwords3 <- c("york", "lane", "school", "transportation", "region", "halton", "can", "use", "guelph", "kingston", "durham", "get")
NAwords4 <- c("active", "and", "asst", "board", "can", "cancellations", "catholic", "contact", "cycling", "district", "east", "gta", "https", "login", "may", "or", "please", "school", "schools", "stp", "student", "students", "the", "transportation", "tri", "walking", "waterloo", "website", "will")
NAwords1 <- c("school", "transportation", "can", "use", "active", "et", "al", "travel", "study", "elsevier", "na", "sciencedirect", "journal", "transport", "mode", "modes", "children", "the", "use", "n", "s", "schools", "also", "p", "b", "used", "number", "data", "research", "variable", "variables", "author", "authors", "researcher", "researchers", "project", "intrument", "may", "-")
corpusNum <- c()
# Iterating through each subfolders
m <- 1
for (subFolder in subFolders){
pdfLocation <- subFolder
if (file.exists(paste(pdfLocation, "txt"))){
txtLocation <- paste(pdfLocation, "txt")
}else{
dir.create(paste(pdfLocation, "txt"))
txtLocation <- paste(pdfLocation, "txt")
}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
####print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
rm(list = ls())
masterFolder <- "Texts"
subFolders <- list.files(masterFolder, full.names=TRUE)
# if txt folder already exists from previous execution of code this ensures it is not added to subfolders
# The limitation is that your file name, at any point cannot contain the sequence of characters "txt" as it will be flagged as a non-pdf subfolder
subFolders <- subFolders[grep(x =list.files(masterFolder, full.names=TRUE), pattern =  "txt", invert = TRUE)]
subFolders
# Stop words for each of the corpora, or based on how your directory organizes files
# Add stop words if you have more than 4 corpora
NAwords2 <- c("login", "css", "sir", "waterloo", "niagara", "john", "school", "transportation", "york", "ottawa", "can", "tip", "london", "provides", "elgin", "find", "make", "active", "travel", "lord", "holy", "toronto")
NAwords3 <- c("york", "lane", "school", "transportation", "region", "halton", "can", "use", "guelph", "kingston", "durham", "get")
NAwords4 <- c("active", "and", "asst", "board", "can", "cancellations", "catholic", "contact", "cycling", "district", "east", "gta", "https", "login", "may", "or", "please", "school", "schools", "stp", "student", "students", "the", "transportation", "tri", "walking", "waterloo", "website", "will")
NAwords1 <- c("school", "transportation", "can", "use", "active", "et", "al", "travel", "study", "elsevier", "na", "sciencedirect", "journal", "transport", "mode", "modes", "children", "the", "use", "n", "s", "schools", "also", "p", "b", "used", "number", "data", "research", "variable", "variables", "author", "authors", "researcher", "researchers", "project", "intrument", "may", "-")
corpusNum <- c()
# Iterating through each subfolders
m <- 1
for (subFolder in subFolders){
pdfLocation <- subFolder
if (file.exists(paste(pdfLocation, "txt"))){
txtLocation <- paste(pdfLocation, "txt")
}else{
dir.create(paste(pdfLocation, "txt"))
txtLocation <- paste(pdfLocation, "txt")
}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
####print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
masterFolder <- "Texts"
subFolders <- list.files(masterFolder, full.names=TRUE)
# if txt folder already exists from previous execution of code this ensures it is not added to subfolders
# The limitation is that your file name, at any point cannot contain the sequence of characters "txt" as it will be flagged as a non-pdf subfolder
subFolders <- subFolders[grep(x =list.files(masterFolder, full.names=TRUE), pattern =  "txt", invert = TRUE)]
subFolders
# Stop words for each of the corpora, or based on how your directory organizes files
# Add stop words if you have more than 4 corpora
NAwords2 <- c("login", "css", "sir", "waterloo", "niagara", "john", "school", "transportation", "york", "ottawa", "can", "tip", "london", "provides", "elgin", "find", "make", "active", "travel", "lord", "holy", "toronto")
NAwords3 <- c("york", "lane", "school", "transportation", "region", "halton", "can", "use", "guelph", "kingston", "durham", "get")
NAwords4 <- c("active", "and", "asst", "board", "can", "cancellations", "catholic", "contact", "cycling", "district", "east", "gta", "https", "login", "may", "or", "please", "school", "schools", "stp", "student", "students", "the", "transportation", "tri", "walking", "waterloo", "website", "will")
NAwords1 <- c("school", "transportation", "can", "use", "active", "et", "al", "travel", "study", "elsevier", "na", "sciencedirect", "journal", "transport", "mode", "modes", "children", "the", "use", "n", "s", "schools", "also", "p", "b", "used", "number", "data", "research", "variable", "variables", "author", "authors", "researcher", "researchers", "project", "intrument", "may", "-")
corpusNum <- c()
# Iterating through each subfolders
m <- 1
for (subFolder in subFolders){
pdfLocation <- subFolder
if (file.exists(paste(pdfLocation, "txt"))){
txtLocation <- paste(pdfLocation, "txt")
}else{
dir.create(paste(pdfLocation, "txt"))
txtLocation <- paste(pdfLocation, "txt")
}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
####print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
corpusKey <- data.frame(corpusNum, subFolders)
rm(temp_df_source, tempCorpus, address, doc_id, fileBaseNames, filePath, i, m, n, newFile, pdfLocation, subFolder, test, txtLocation)
masterFolder <- "Texts"
subFolders <- list.files(masterFolder, full.names=TRUE)
# if txt folder already exists from previous execution of code this ensures it is not added to subfolders
# The limitation is that your file name, at any point cannot contain the sequence of characters "txt" as it will be flagged as a non-pdf subfolder
subFolders <- subFolders[grep(x =list.files(masterFolder, full.names=TRUE), pattern =  "txt", invert = TRUE)]
subFolders
# Stop words for each of the corpora, or based on how your directory organizes files
# Add stop words if you have more than 4 corpora
NAwords2 <- c("login", "css", "sir", "waterloo", "niagara", "john", "school", "transportation", "york", "ottawa", "can", "tip", "london", "provides", "elgin", "find", "make", "active", "travel", "lord", "holy", "toronto")
NAwords3 <- c("york", "lane", "school", "transportation", "region", "halton", "can", "use", "guelph", "kingston", "durham", "get")
NAwords4 <- c("active", "and", "asst", "board", "can", "cancellations", "catholic", "contact", "cycling", "district", "east", "gta", "https", "login", "may", "or", "please", "school", "schools", "stp", "student", "students", "the", "transportation", "tri", "walking", "waterloo", "website", "will")
NAwords1 <- c("school", "transportation", "can", "use", "active", "et", "al", "travel", "study", "elsevier", "na", "sciencedirect", "journal", "transport", "mode", "modes", "children", "the", "use", "n", "s", "schools", "also", "p", "b", "used", "number", "data", "research", "variable", "variables", "author", "authors", "researcher", "researchers", "project", "intrument", "may", "-")
corpusNum <- c()
# Iterating through each subfolders
m <- 1
for (subFolder in subFolders){
pdfLocation <- subFolder
if (file.exists(paste(pdfLocation, "txt"))){
txtLocation <- paste(pdfLocation, "txt")
}else{
dir.create(paste(pdfLocation, "txt"))
txtLocation <- paste(pdfLocation, "txt")
}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
####print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
rm(list = ls())
masterFolder <- "Texts"
subFolders <- list.files(masterFolder, full.names=TRUE)
# if txt folder already exists from previous execution of code this ensures it is not added to subfolders
# The limitation is that your file name, at any point cannot contain the sequence of characters "txt" as it will be flagged as a non-pdf subfolder
subFolders <- subFolders[grep(x =list.files(masterFolder, full.names=TRUE), pattern =  "txt", invert = TRUE)]
subFolders
# Stop words for each of the corpora, or based on how your directory organizes files
# Add stop words if you have more than 4 corpora
NAwords2 <- c("login", "css", "sir", "waterloo", "niagara", "john", "school", "transportation", "york", "ottawa", "can", "tip", "london", "provides", "elgin", "find", "make", "active", "travel", "lord", "holy", "toronto")
NAwords3 <- c("york", "lane", "school", "transportation", "region", "halton", "can", "use", "guelph", "kingston", "durham", "get")
NAwords4 <- c("active", "and", "asst", "board", "can", "cancellations", "catholic", "contact", "cycling", "district", "east", "gta", "https", "login", "may", "or", "please", "school", "schools", "stp", "student", "students", "the", "transportation", "tri", "walking", "waterloo", "website", "will")
NAwords1 <- c("school", "transportation", "can", "use", "active", "et", "al", "travel", "study", "elsevier", "na", "sciencedirect", "journal", "transport", "mode", "modes", "children", "the", "use", "n", "s", "schools", "also", "p", "b", "used", "number", "data", "research", "variable", "variables", "author", "authors", "researcher", "researchers", "project", "intrument", "may", "-")
corpusNum <- c()
# Iterating through each subfolders
m <- 1
for (subFolder in subFolders){
pdfLocation <- subFolder
if (file.exists(paste(pdfLocation, "txt"))){
txtLocation <- paste(pdfLocation, "txt")
}else{
dir.create(paste(pdfLocation, "txt"))
txtLocation <- paste(pdfLocation, "txt")
}
fileBaseNames <- list.files(pdfLocation, pattern = "*.pdf", full.names=FALSE)
filePath <- list.files(pdfLocation, pattern = "*.pdf", full.names=TRUE)
n <- 1
for (address in filePath)
{
doc <- readPDF(control = list(text = "-layout"))(elem = list(uri = address), language = "en")
test <- doc$content
# "file_path_sans_ext(basename())" from the tools package strips the base name for the file of interest and removed the extension at the end which as seen below allow for the replacement of .pdf for .txt
# use of 'sep = ""' argument is important to prevent the addition of spaces, which is the default for the paste function
newFile <- paste(txtLocation, "/", file_path_sans_ext(basename(address)), ".txt", sep = "")
write(test, file = newFile)
####print(paste(file_path_sans_ext(basename(address)), ".txt Has been created", sep = ""))
# Creates uniquely id text store in 'Environment'
assign(paste("text", n, sep = ""), readChar(newFile, file.info(newFile)$size))
n <- n+1
}
text <- vector()
doc_id <- c(2:n-1)
for (i in seq(1, n-1, 1))
{
text[i] <- eval(parse(text = paste("text", i, sep = "")))
}
textDF <- data.frame(doc_id, text)
temp_df_source <- DataframeSource(textDF)
tempCorpus <- VCorpus(temp_df_source)
# corpus cleaning
tempCorpus <- tm_map(tempCorpus, stripWhitespace)
tempCorpus <- tm_map(tempCorpus, content_transformer(tolower))
tempCorpus <- tm_map(tempCorpus, removePunctuation)
tempCorpus <- tm_map(tempCorpus, removeWords, stopwords("english"))
tempCorpus <- tm_map(tempCorpus, removeWords, eval(parse(text = paste("NAwords", m, sep = ""))))
tempCorpus <- tm_map(tempCorpus, removeNumbers)
assign(paste("cleanTextDF", m, sep = ""), data.frame(text = sapply(tempCorpus, as.character), stringsAsFactors = FALSE))
assign(paste("corpus", m, sep= ""), tempCorpus)
corpusNum <- c(corpusNum, paste(m))
# removed tempory texts for next iteration
m <- m + 1
rm(list=ls(pattern = "^text"))
}
corpusKey <- data.frame(corpusNum, subFolders)
rm(temp_df_source, tempCorpus, address, doc_id, fileBaseNames, filePath, i, m, n, newFile, pdfLocation, subFolder, test, txtLocation)
library(tm)
library(readr)
library(tools)
library(dplyr)
library(tidytext)
library(topicmodels)
library(ggplot2)
library(wordcloud)
library(word2vec)
library(pdftools)
library(reshape2)
library(text2vec)
